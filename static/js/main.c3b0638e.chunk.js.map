{"version":3,"sources":["reducers/bookReducer.js","context/BooksContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuid","filter","BooksContext","createContext","BooksContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","Provider","useEffect","setItem","stringify","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MACaA,EAAc,SAACC,EAAOC,GACjC,OAAOA,EAAOC,MACZ,IAAK,WACL,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACdG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,SAER,IAAK,cACH,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,MACjD,QACA,OAAON,ICPES,EAAgBC,0BAmBdC,MAjBf,SAA8BC,GAAQ,IAAD,EACTC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,GAAaG,KAAKC,MAAMJ,MAHE,mBAC5BK,EAD4B,KACrBC,EADqB,KAK3BC,EAAaZ,EAAbY,SAKR,OAHAC,qBAAU,WACRP,aAAaQ,QAAQ,QAASN,KAAKO,UAAUL,MAC7C,CAACA,IAED,kBAACE,EAAD,CAAUI,MAAO,CAACN,QAAOC,aACtBR,EAAMc,WCNEC,MAXf,WAAmB,IACTR,EAAUS,qBAAWnB,GAArBU,MAER,OACE,yBAAKU,UAAU,UACb,4CACA,iDAAwBV,EAAMW,OAA9B,8BCKSC,MAVf,YAA8B,IAAR3B,EAAO,EAAPA,KACZgB,EAAaQ,qBAAWnB,GAAxBW,SACR,OACD,wBAAIY,QAAS,kBAAMZ,EAAS,CAAClB,KAAK,cAAeI,GAAGF,EAAKE,OACvD,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCalB4B,MAlBf,WAAqB,IACXd,EAAUS,qBAAWnB,GAArBU,MAER,OAAOA,EAAMW,OACX,yBAAKD,UAAU,cACb,4BAEIV,EAAMe,KAAI,SAAA9B,GACR,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAMlD,yBAAKuB,UAAU,SAAf,yCCQWO,MAtBf,WAAqB,IACZhB,EAAYQ,qBAAWnB,GAAvBW,SADW,EAEQiB,mBAAS,IAFjB,mBAEXlC,EAFW,KAEJmC,EAFI,OAGUD,mBAAS,IAHnB,mBAGXhC,EAHW,KAGHkC,EAHG,KAalB,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACFtB,EAAS,CAAClB,KAAM,WAAYE,KAAK,CAC/BD,QACAE,YAEFiC,EAAS,IACTC,EAAU,MAIR,2BAAOrC,KAAK,OAAOyC,YAAY,gBAAgBC,SAAU,SAAAH,GAAC,OAAIH,EAASG,EAAEI,OAAOpB,QAAQA,MAAOtB,EAAO2C,UAAQ,IAC9G,2BAAO5C,KAAK,OAAOyC,YAAY,iBAAiBC,SAAU,SAAAH,GAAC,OAAIF,EAAUE,EAAEI,OAAOpB,QAAQA,MAAOpB,EAAQyC,UAAQ,IACjH,2BAAO5C,KAAK,SAASuB,MAAM,kBCHlBsB,MAZf,WACE,OACE,yBAAKlB,UAAU,OACf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3b0638e.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\r\nexport const bookReducer = (state, action) => {\r\n  switch(action.type){\r\n    case 'ADD_BOOK':  \r\n    return [...state, {\r\n        title: action.book.title,\r\n        author: action.book.author,\r\n        id: uuid()\r\n    }]\r\n    case 'REMOVE_BOOK':\r\n      return state.filter(book => book.id !== action.id)\r\n    default:\r\n    return state;\r\n  }\r\n}","import React, { useReducer, useEffect, createContext } from 'react'\r\nimport {bookReducer} from '../reducers/bookReducer';\r\n\r\n\r\n\r\nexport const BooksContext =  createContext();\r\n\r\nfunction BooksContextProvider(props) {\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem('books');\r\n    return localData && JSON.parse(localData)\r\n  });\r\n  const { Provider } = BooksContext;\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('books', JSON.stringify(books))\r\n  },[books])\r\n  return (\r\n    <Provider value={{books, dispatch}}>\r\n      {props.children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default BooksContextProvider\r\n","import React, { useContext } from 'react'\r\nimport {BooksContext} from '../context/BooksContext';\r\nfunction Navbar() {\r\n  const { books } = useContext(BooksContext);\r\n  \r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Reading List</h1>\r\n      <p>Currently you have { books.length} books to get through...</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useContext } from 'react'\r\nimport { BooksContext } from '../context/BooksContext';\r\n\r\nfunction BookDetails({book}) {\r\n  const { dispatch } = useContext(BooksContext);\r\n  return (\r\n <li onClick={() => dispatch({type:'REMOVE_BOOK', id:book.id})}>\r\n   <div className=\"title\">{book.title}</div>\r\n   <div className=\"author\">{book.author}</div>\r\n </li>\r\n  )\r\n}\r\n\r\nexport default BookDetails\r\n","import React, { useContext } from 'react'\r\nimport {BooksContext} from '../context/BooksContext';\r\nimport BookDetails from './BookDetails';\r\nfunction BookList() {\r\n  const { books } = useContext(BooksContext)\r\n  \r\n  return books.length ? (\r\n    <div className=\"book__list\">\r\n      <ul>\r\n        {\r\n          books.map(book => {\r\n            return(<BookDetails book={book} key={book.id}/>)\r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  ):(\r\n    <div className=\"empty\">No bookd to read. Hello free time :)</div>\r\n  )\r\n}\r\n\r\nexport default BookList\r\n","import React, { useContext, useState } from 'react';\r\nimport { BooksContext } from '../context/BooksContext';\r\n\r\nfunction BookForm() {\r\n  const {dispatch} = useContext(BooksContext);\r\n  const [title, setTitle] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch({type: 'ADD_BOOK', book:{\r\n      title,\r\n      author\r\n    }})\r\n    setTitle('');\r\n    setAuthor('');\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type='text' placeholder=\"Book Title...\" onChange={e => setTitle(e.target.value)} value={title} required/>\r\n      <input type='text' placeholder=\"Book Author...\" onChange={e => setAuthor(e.target.value)} value={author} required/>\r\n      <input type='submit' value='Submit Book'/>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default BookForm\r\n","import React from 'react';\nimport BooksContextProvider from './context/BooksContext'\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <BooksContextProvider>\n      <Navbar/>\n      <BookList/>\n      <NewBookForm/>\n    </BooksContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}